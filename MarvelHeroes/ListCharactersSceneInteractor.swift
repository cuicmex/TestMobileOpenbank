//
//  ListCharactersSceneInteractor.swift
//  MarvelHeroes
//
//  Created by Humberto C Trujano Chavez on 30/1/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListCharactersSceneBusinessLogic
{
    func requestReloadTable(elementsByPage: Int)
    func requestNextTablePage(page: Int, elementsByPage: Int)
    func requestDetailCharacterInfo(idCharacter: Int)
    
}

protocol ListCharactersSceneDataStore{
    var detailCharacterInfo: DetailCharacterModel? {get set}
}

class ListCharactersSceneInteractor: ListCharactersSceneBusinessLogic, ListCharactersSceneDataStore
{
    var presenter: ListCharactersScenePresentationLogic?
    var detailCharacterInfo: DetailCharacterModel? = nil
    
    // MARK: Do ListCharactersSceneBusinessLogic
        
    func requestReloadTable(elementsByPage: Int) {

        self.presenter?.presentStartActivity()
        
        let parameters = ListCharactersNetworkingWorker.parametersFor(page: 1, limit: elementsByPage)
        
        ListCharactersNetworkingWorker.performRequest(parameters: parameters, parametersPath: nil, typeOfModel: ListCharactersInfo.self, completion: { result, error in

            self.presenter?.presentStopActivity()

            if let result = result, !error {
                self.presenter?.presentListCharactersOk(listInfo: result)
            }else{
                self.presenter?.presentListCharactersErrorReloading()
            }            
        })
    }
    
    func requestNextTablePage(page: Int, elementsByPage: Int){

        let parameters = ListCharactersNetworkingWorker.parametersFor(page: page, limit: elementsByPage)
        
        ListCharactersNetworkingWorker.performRequest(parameters: parameters, parametersPath: nil, typeOfModel: ListCharactersInfo.self) { result, error in

            if let result = result, !error {
                self.presenter?.presentNextListCharactersPage(listInfo: result)
            }else{
                self.presenter?.stopListCharactersPagination()
            }
        }
    }
    
    func requestDetailCharacterInfo(idCharacter: Int){
        
        self.presenter?.presentStartActivity()

        let parametersPath=[DetailCharacterNetworkingWorker.kKey_idCharacter: idCharacter]
        
        DetailCharacterNetworkingWorker.performRequest(parameters: nil, parametersPath: parametersPath, typeOfModel: DetailCharacterInfo.self) { result, error in

            self.presenter?.presentStopActivity()

            if let result = result, !error {
                self.presenter?.presentDetailCharacter(detailInfo: result)
            }else{
                self.presenter?.presentDetailCharacterErrorLoading()
            }
        }
    }

    
}
