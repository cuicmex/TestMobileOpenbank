//
//  ListCharactersSceneViewController.swift
//  MarvelHeroes
//
//  Created by Humberto C Trujano Chavez on 30/1/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire

protocol ListCharactersSceneDisplayLogic: BaseViewControllerDisplayLogic
{
    func reloadTable(listInfo: ListCharactersInfo)
    func showLoadErrorViewByListCharacters()
    func updateNextPaginationPage(listInfo: ListCharactersInfo)
    func stopPagination()
    func showDetailCharacter(detailInfo: DetailCharacterInfo)
    func showLoadErrorViewByDetailCharacter()
}

class ListCharactersSceneViewController: TablePaginatedBaseViewController, ListCharactersSceneDisplayLogic
{
    static let idSegue_ListToDetailCharacter: String = "idSegue_ListToDetailCharacter"
    
    var interactor: ListCharactersSceneBusinessLogic?
    var router: (NSObjectProtocol & ListCharactersSceneRoutingLogic & ListCharactersSceneDataPassing)?
        
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListCharactersSceneInteractor()
        let presenter = ListCharactersScenePresenter()
        let router = ListCharactersSceneRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?){
        if segue.identifier == ListCharactersSceneViewController.idSegue_ListToDetailCharacter {
            self.router?.passDataToDetailCharacterScene(segue: segue)
        }
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
                
        // Self-sizing magic!
        self.tblView.rowHeight = UITableView.automaticDimension
        self.tblView.estimatedRowHeight = self.tblView.rowHeight

        tryReloadTable()
    }

    // MARK: - Overrides
    
    override func configTablePaginatedVC(){
        self.elementsByPage = 20
        self.reuseIdentifier = "ListCharacterCell"
        self.heightToCalculateCheckPoint = 100.0
    }
    
    // MARK: - Actions
    
    @objc func pressRetryOnLoadErrorViewByListCharacters(){
        retryReloadTable()
    }

    @objc func pressAcceptOnLoadErrorViewByDetailCharacter(){
        removeLoadErrorView(completion: nil)
    }

    // MARK: - Interactor communication
        
    func tryReloadTable(){
        super.launchDataRequest()
        interactor?.requestReloadTable(elementsByPage: self.elementsByPage)
    }

    func retryReloadTable(){
        removeLoadErrorView(completion: {
            self.tryReloadTable()
        })
    }

    func tableWantNextPage(page: Int){
        interactor?.requestNextTablePage(page: page, elementsByPage: self.elementsByPage)
    }
    
    func tableWantShowCharacterDetail(idCharacter: Int){
        interactor?.requestDetailCharacterInfo(idCharacter: idCharacter)
    }
    
    // MARK: - Display Logic (Presenter protocol communication)

    func reloadTable(listInfo: ListCharactersInfo){
        updateFeedPagination(responseObject: listInfo)
    }

    func showLoadErrorViewByListCharacters() {
        createLoadErrorView(titleBtn: NSLocalizedString("gral_Retry", comment: ""), selector: #selector(pressRetryOnLoadErrorViewByListCharacters))
    }
    
    func updateNextPaginationPage(listInfo: ListCharactersInfo){
        updateFeedPagination(responseObject: listInfo)
    }
    
    func stopPagination(){
        stopPaginationByError()
    }

    func showDetailCharacter(detailInfo: DetailCharacterInfo){
        var dataStore = self.router!.dataStore!
        dataStore.detailCharacterInfo = detailInfo.character
        self.router?.routeToDetailCharacterScene()
    }
    
    func showLoadErrorViewByDetailCharacter(){
        createLoadErrorView(titleBtn: NSLocalizedString("gral_Accept", comment: ""), selector: #selector(pressAcceptOnLoadErrorViewByDetailCharacter))
    }

    // MARK: Overrides Pagination
        
    override func launchNextPageRequest() {
        super.launchNextPageRequest()
        tableWantNextPage(page: self.feedPagination.lastPageReadIt+1)
    }
    
    override func updateFeedPagination(responseObject: Any) {
        
        if let listInfo: ListCharactersInfo = responseObject as? ListCharactersInfo {
            self.feedPagination.totalElementsExpected = listInfo.total
            self.feedPagination.addLastFetch(elements: listInfo.listCharacters)
            processPagination()
        }
    }
    
    // MARK: Overrides table paginated
    
    override func tableViewSelect(item: Any, atIndexPath: IndexPath){

        self.tblView.deselectRow(at: atIndexPath, animated: true)
        
        if let characterInfo = item as? ListCharacterModel {
            tableWantShowCharacterDetail(idCharacter: characterInfo.characterId)
        }
    }
}

